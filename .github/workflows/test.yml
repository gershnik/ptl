name: Build

on: 
  push:
    branches: 
      - '*'
      - '*/**'
    paths-ignore:
      - 'README.md'
      - '.gitignore'
      - 'LICENSE'
      - 'CHANGELOG.md'
      - 'tools/**'


jobs:
  selfhosted:
    concurrency: ${{ matrix.remote_host }}
    runs-on: [self-hosted, server]
    strategy:
      fail-fast: false
      matrix:
        remote_host: [freebsd-13.1]
        
    steps:
    - name: Run remote build
      run: |
        "$RUNNER_TOOLS_PATH"/run-agent gh-${{ matrix.remote_host }} <<'EOF'
        set -e
        if [ ! -d work/ptl ]; then
          git clone https://github.com/gershnik/ptl.git work/ptl
        fi
        cd work/ptl
        git fetch --all
        git fetch -f --prune --tags
        git reset --hard ${{ github.sha }}
        rm -rf out
        cmake -S . -B out -DCMAKE_BUILD_TYPE=RelWithDebInfo 
        cmake --build out --target run-test
        EOF

  local:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure
      shell: bash
      run: |
          cmake -E make_directory out
          cmake -S . -B out -DCMAKE_BUILD_TYPE=RelWithDebInfo 

    - name: Build
      run: |
          cmake --build out --target run-test

  mingw:
    runs-on: windows-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure
      shell: cmd
      run: |
          cmake -E make_directory out
          PATH=C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin;%PATH%
          cmake -G "MinGW Makefiles" -S . -B out -DCMAKE_BUILD_TYPE=RelWithDebInfo 

    - name: Build
      shell: cmd
      run: |
          PATH=C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin;%PATH%
          cmake --build out --target run-test

  cygwin:
    runs-on: windows-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install Cygwin
      uses: egor-tensin/setup-cygwin@v4
      with:
        packages: cmake ninja gcc-g++ cygwin-devel

    - name: Configure
      shell: C:\tools\cygwin\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'
      run: |
          cd ${GITHUB_WORKSPACE}
          cmake -E make_directory out
          cmake -GNinja -S . -B out -DCMAKE_BUILD_TYPE=RelWithDebInfo 

    - name: Build
      shell: C:\tools\cygwin\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'
      run: |
          cd ${GITHUB_WORKSPACE}
          cmake --build out --target run-test

  android:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        version: [25.2.9519653]
        api: [21, 30]    
        arch: [x86_64]
    steps:
    - uses: actions/checkout@v3
    - uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 30
        arch: ${{matrix.arch}}
        target: google_apis
        ndk: ${{ matrix.version }}
        script: |
            cmake -E make_directory out
            cmake -S . -B out -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_TOOLCHAIN_FILE:FILEPATH=$ANDROID_SDK_ROOT/ndk/${{ matrix.version }}/build/cmake/android.toolchain.cmake -DANDROID_ABI:STRING=${{ matrix.arch }} -DANDROID_PLATFORM:STRING=${{ matrix.api }} -DANDROID_STL:STRING=c++_static
            cmake --build out --target run-test

